[project]
name = "openmeeg"
description = "Forward problems solver in the field of EEG and MEG."
dynamic = ["version"]
maintainers = [{ name="Alexandre Gramfort", email = "alexandre.gramfort@inria.fr" }]
license= { text = "CECILL-B" }
readme = { file = "README.rst", content-type = "text/x-rst" }
requires-python = ">=3.9"
keywords = [
    "neuroscience",
    "neuroimaging",
    "MEG",
    "EEG",
    "ECoG",
    "sEEG",
    "iEEG",
    "brain",
]
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "numpy",
]

[project.urls]
Homepage = "http://openmeeg.github.io"
Download = "http://github.com/openmeeg/openmeeg"
"Bug Tracker" = "https://github.com/openmeeg/openmeeg/issues"
Documentation = "https://openmeeg.github.io"
"Source code" = "https://github.com/openmeeg/openmeeg"

[build-system]
requires = [
    # Changes here need to be reflected in cibw_before_build_windows.sh
    "setuptools>=68.0.0",
    "setuptools_scm>=6.2",
    "wheel>=0.37.0",
    "numpy>=2.0.0rc1,<3",
]

[tool.setuptools]
packages = ["openmeeg", "openmeeg/tests"]
zip-safe = false
include-package-data = true  # the default but let's be explicit

[tool.setuptools_scm]
version_scheme = "release-branch-semver"
root = "../../"

[tool.cibuildwheel]
# 3.9 is the only wheel NumPy ships for PyPy as of 2024/05/20
skip = ["pp310*", "pp*-win_*"]
archs = "native"
build-verbosity = 3
before-all = "bash {project}/build_tools/cibw_before_all.sh {project}"
# pytest 8.0: https://github.com/pytest-dev/pytest/issues/11884
test-requires = [
    "pytest!=8.0.0,!=8.0.1,!=8.0.2,!=8.1.1,!=8.1.2,!=8.2.0,!=8.2.1;platform_system=='Windows'",
    "pytest;platform_system!='Windows'",
    "threadpoolctl",
]
test-command = "bash {project}/build_tools/cibw_test_command.sh {project}"

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux_2_28"
repair-wheel-command = "auditwheel show {wheel} && auditwheel repair -w {dest_dir} {wheel}"
environment-pass = ["RUNNER_OS"]
environment = { OPENMEEG_LIB="../../install/lib64", OPENMEEG_INCLUDE="../../install/include/OpenMEEG", OPENMEEG_USE_SWIG="1", OPENBLAS_INCLUDE="/usr/local/include" }

[tool.cibuildwheel.macos]
repair-wheel-command = "bash $GITHUB_WORKSPACE/build_tools/cibw_repair_wheel_command_macos.sh {delocate_archs} {dest_dir} {wheel}"
environment = { OPENMEEG_LIB="../../install/lib", OPENMEEG_INCLUDE="../../install/include/OpenMEEG", OPENMEEG_USE_SWIG="1", OPENBLAS_INCLUDE="/usr/local/include", MACOSX_DEPLOYMENT_TARGET="10.15" }

[tool.cibuildwheel.windows]
before-build = "bash {project}/build_tools/cibw_before_build_windows.sh {project}"
repair-wheel-command = "bash %GITHUB_WORKSPACE%/build_tools/cibw_repair_wheel_command_windows.sh {dest_dir} {wheel}"
environment = { OPENMEEG_USE_SWIG="0" }

[tool.ruff]
select = ["E", "F", "W", "D", "I"]
exclude = ["__init__.py", "setup.py"]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D413", # Missing blank line after last section
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"*/tests/*.py" = [
    "D103", # Missing docstring in public function
]
