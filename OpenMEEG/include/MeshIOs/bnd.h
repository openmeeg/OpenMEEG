// Project Name: OpenMEEG (http://openmeeg.github.io)
// Â© INRIA and ENPC under the French open source license CeCILL-B.
// See full copyright notice in the file LICENSE.txt
// If you make a copy of this file, you must either:
// - provide also LICENSE.txt and modify this header to refer to it.
// - replace this header by the LICENSE.txt content.

#pragma once

#include <iostream>
#include <string>

#include <IOUtils.H>
#include <om_utils.h>
#include <MeshIO.h>

namespace OpenMEEG::MeshIOs {

    /// \brief Mesh io for TRI file format.

    class OPENMEEG_EXPORT Bnd: public MeshIO {

        typedef MeshIO base;

    public:

        void load_points(Geometry& geom) override {
            std::string st;
            fs >> io_utils::skip_comments('#') >> st;
            if (st=="Type=") {
                io_utils::skip_line(fs);
                fs >> io_utils::skip_comments('#') >> st;
            }
            om_error(st=="NumberPositions=");
            unsigned npts;
            fs >> npts;

            fs >> io_utils::skip_comments('#') >> st;
            if (st=="UnitPosition")
                io_utils::skip_line(fs); // skip : "UnitPosition mm"

            fs >> io_utils::skip_comments('#') >> st;
            om_error(st == "Positions");

            Vertices vertices;
            for (unsigned i=0; i<npts; ++i) {
                Vertex v;
                fs >> io_utils::skip_comments('#') >> v;
                vertices.push_back(v);
            }
            indmap = geom.add_vertices(vertices);
        }

        void load_triangles(OpenMEEG::Mesh& this_mesh) override {
            reference_vertices(this_mesh);

            std::string st;
            fs >> io_utils::skip_comments('#') >> st;
            om_error(st=="NumberPolygons=");

            unsigned ntrgs;
            fs >> io_utils::skip_comments('#') >> ntrgs;

            fs >> io_utils::skip_comments('#') >> st;
            om_error(st == "TypePolygons=");
            fs >> io_utils::skip_comments('#') >> st;
            om_error(st=="3");

            fs >> io_utils::skip_comments('#') >> st;
            om_error(st=="Polygons");

            this_mesh.triangles().reserve(ntrgs);
            for (unsigned i=0; i<ntrgs; ++i) {
                TriangleIndices t;
                fs >> io_utils::skip_comments('#') >> t[0] >> t[1] >> t[2];
                this_mesh.add_triangle(t,indmap);
            }
        }

        void save(const OpenMEEG::Mesh& this_mesh,std::ostream& os) const override {
            os << "# Bnd mesh file generated by OpenMeeg" << std::endl;
            os << "Type= Unknown" << std::endl;
            os << "NumberPositions= " << this_mesh.vertices().size() << std::endl;
            os << "UnitPosition\tmm" << std::endl;
            os << "Positions" << std::endl;

            const VertexIndices& vertex_index(this_mesh);
            for (const auto& vertex : this_mesh.vertices())
                os << *vertex << std::endl;
            os << "NumberPolygons= " << this_mesh.triangles().size() << std::endl;
            os << "TypePolygons=\t3" << std::endl;
            os << "Polygons" << std::endl;
            for (const auto& triangle : this_mesh.triangles())
                os << vertex_index(triangle,0) << ' '
                   << vertex_index(triangle,1) << ' '
                   << vertex_index(triangle,2) << std::endl;
        }

        MeshIO* clone(const std::string& filename) const override { return new Bnd(filename); }

    private:

        Bnd(const std::string& filename=""): base(filename,"bnd") { }

        static const Bnd prototype;

        const char* name() const override { return "BND"; }
    };
}
