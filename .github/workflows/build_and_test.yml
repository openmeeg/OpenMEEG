name: Test
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash -el {0}

jobs:

  build:
    continue-on-error: true
    strategy:
      matrix:
        # TODO: MKL currently untested on any platform
        # Currently, VTK is only installed+tested on Ubuntu
        # Someday we could use OpenBLAS for Windows once vcpkg sorts things out
        # (https://github.com/microsoft/vcpkg/issues/25176), but it's unclear
        # if this will really help anything. SciPy's should be well tested
        # already.
        os: [ubuntu-20.04, windows-2019, macos-latest]
        blas: [OpenBLAS]
        blas_linking: [dynamic]
        python: [python]
        include:
        # ubuntu-18.04 build, but Python tests currently fail so use no-python
        - os: ubuntu-18.04
          blas: OpenBLAS
          blas_linking: dynamic
          python: no-python
        # Windows static build
        - os: windows-2019
          blas: OpenBLAS
          blas_linking: static
          python: python

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Environment setup
      run: |
        if [ ${{matrix.blas_linking}} == 'static' ]; then
          echo "BLA_STATIC_OPT='-DBLA_STATIC=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.python}} == 'python' ]; then
          echo "PYTHON_OPT='-DENABLE_PYTHON=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.blas}} == 'MKL' ]; then
          echo "BLA_IMPL=-DBLA_IMPLEMENTATION=MKL" >> $GITHUB_ENV
          echo "BLA_PARA=-DMKL_PARALLELISM=sequential" >> $GITHUB_ENV
        fi
        # Build docs on Ubuntu, not elsewhere (for speed)
        if [[ ${{matrix.os}} == 'ubuntu'* ]]; then
          BUILD_DOCS=ON
        else
          BUILD_DOCS=OFF
        fi
        # Use -Werror on Windows and macOS, eventually should use on Linux
        if [[ ${{matrix.os}} != 'ubuntu*' ]]; then
          ENABLE_WERROR=OFF
        else
          ENABLE_WERROR=ON
        fi
        echo "ENABLE_WERROR=$ENABLE_WERROR" >> $GITHUB_ENV
        echo "DOC_OPT=-DBUILD_DOCUMENTATION=$BUILD_DOCS" >> $GITHUB_ENV

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}

    # Always use conda for Python
    - name: Setup Python
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: "test"
        python-version: "3.10"
        channels: conda-forge
        channel-priority: strict

    - name: Add Python packages
      if: startswith(matrix.python, 'python')
      run: |
        pip install --upgrade -q pip
        if [[ ${{matrix.os}} == 'windows'* ]]; then
          EXTRA_PIP=delvewheel
        elif [[ ${{matrix.os}} == 'macos'* ]]; then
          EXTRA_PIP=delocate
        else
          EXTRA_PIP=auditwheel
        fi
        pip install --upgrade --progress-bar off -q oldest-supported-numpy setuptools wheel twine $EXTRA_PIP
        # Fix Miniconda paths
        echo "PYTHON_INFO_OPT=-DPython3_EXECUTABLE=$(which python)" >> $GITHUB_ENV

    - name: MKL setup - mkl via conda
      if: startswith(matrix.blas,'MKL')
      run: |
        conda install mkl mkl-include

    - name: Windows OpenBLAS setup 1 - set env
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      run: |
        VCPKG_INSTALLED_DIR="${PWD}/build/vcpkg_installed"
        echo "$VCPKG_INSTALLED_DIR"
        VCPKG_INSTALLED_DIR=$(cygpath -m "$VCPKG_INSTALLED_DIR")
        echo "$VI"
        echo "VCPKG_INSTALLED_DIR=$VCPKG_INSTALLED_DIR" >> $GITHUB_ENV
        VCPKG_DEFAULT_TRIPLET=x64-mingw-dynamic
        echo "VCPKG_DEFAULT_TRIPLET=$VCPKG_DEFAULT_TRIPLET" >> $GITHUB_ENV
        echo "VCPKG_DEFAULT_HOST_TRIPLET=$VCPKG_DEFAULT_TRIPLET" >> $GITHUB_ENV
        VCPKG_INSTALL_OPTIONS="--x-install-root=$VCPKG_INSTALLED_DIR --triplet=$VCPKG_DEFAULT_TRIPLET"
        echo "VCPKG_INSTALL_OPTIONS=$VCPKG_INSTALL_OPTIONS" >> $GITHUB_ENV

        CMAKE_TOOLCHAIN_FILE=${PWD}/vcpkg/scripts/buildsystems/vcpkg.cmake
        echo "$CMAKE_TOOLCHAIN_FILE"
        CMAKE_TOOLCHAIN_FILE=$(cygpath -m "$CMAKE_TOOLCHAIN_FILE")
        echo "$CMAKE_TOOLCHAIN_FILE"
        echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> $GITHUB_ENV

    - name: Windows OpenBLAS setup 2 - cache vcpkg
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      uses: actions/cache@v3
      with:
        path: |
          vcpkg
          build/vcpkg_installed
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-mingw64-0

    - name: Windows OpenBLAS setup 3 - hdf5 and libmatio via vcpkg
      if: startswith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      id: runvcpkg
      run: |
        set -x
        if [ ! -d vcpkg ]; then
          git clone https://github.com/Microsoft/vcpkg.git --depth=1
          cd vcpkg
          git fetch origin 2022.05.10:use --depth=1
          git checkout use
          ./bootstrap-vcpkg.sh
          cd ..
        fi
        echo "VCPKG_INSTALLED_DIR: $VCPKG_INSTALLED_DIR"
        echo "CMAKE_TOOLCHAIN_FILE: $CMAKE_TOOLCHAIN_FILE"
        test -f $(cygpath -u "$CMAKE_TOOLCHAIN_FILE")

    - name: Windows OpenBLAS setup 4 - OpenBLAS via MacPython download
      if: startsWith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      run: |
        # OpenBLAS direct download (too slow to build using vcpkg)
        # and renaming to match what cmake wants to see
        curl -LO https://anaconda.org/multibuild-wheels-staging/openblas-libs/v0.3.18/download/openblas-v0.3.18-win_amd64-gcc_8_1_0.zip
        unzip openblas-v0.3.18-win_amd64-gcc_8_1_0.zip -d openblas
        OPENBLAS_LIB=${PWD}/openblas/64/lib
        OPENBLAS_INCLUDE=${PWD}/openblas/64/include
        echo "$OPENBLAS_LIB"
        test -d "$OPENBLAS_LIB"
        echo "$OPENBLAS_INCLUDE"
        test -d "$OPENBLAS_INCLUDE"
        cd $OPENBLAS_LIB
        ls -al
        if [[ "${{ matrix.linking }}" != "static" ]]; then
          cp ../bin/libopenblas_v0.3.18-gcc_8_1_0.dll .
          cp libopenblas_v0.3.18-gcc_8_1_0.dll openblas.dll
          mv libopenblas_v0.3.18-gcc_8_1_0.dll.a openblas.dll.a
        fi
        mv libopenblas_v0.3.18-gcc_8_1_0.a openblas.a
        mv libopenblas_v0.3.18-gcc_8_1_0.def openblas.def
        mv libopenblas_v0.3.18-gcc_8_1_0.exp openblas.exp
        mv libopenblas_v0.3.18-gcc_8_1_0.lib openblas.lib
        cd ../../../
        echo "OPENBLAS_LIB=$OPENBLAS_LIB" >> $GITHUB_ENV
        echo "LIB=$(cygpath -w $OPENBLAS_LIB);${LIB}" >> $GITHUB_ENV
        #echo "CPATH=$(cygpath -w $OPENBLAS_INCLUDE);${CPATH}" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=-I$(cygpath -m $OPENBLAS_INCLUDE)" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR=MinGW Makefiles" >> $GITHUB_ENV

        #echo "CMAKE_GENERATOR=Visual Studio 16 2019" >> $GITHUB_ENV
        #echo "CMAKE_GENERATOR_PLATFORM=x64" >> $GITHUB_ENV
        #echo "SDK_OPT=-DCMAKE_SYSTEM_VERSION=8.1" >> $GITHUB_ENV
        #echo "TOOLSET_OPT=-DCMAKE_GENERATOR_TOOLSET=v141" >> $GITHUB_ENV

        # On Windows, we tell cmake to copy all runtime deps to the build dir,
        # and for tests (and Python) to find them, we need to add it to PATH
        #echo "PATH=$(cygpath -w ${PWD}/build);$PATH" >> $GITHUB_ENV
        #echo "PYTHONPATH=$(cygpath -w ${PWD}/build);$PYTHONPATH" >> $GITHUB_ENV
        # This makes debugging easier on failure
        # echo "BUILD_OPT=-j 1" >> $GITHUB_ENV
        # Finally, print our settings
        cat $GITHUB_ENV

    - name: macOS OpenBLAS setup - openblas, hdf5, libmatio via brew
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'macos')
      run: |
        brew update > /dev/null
        brew install hdf5 libmatio boost swig openblas
        BLAS_DIR=/usr/local/opt/openblas
        echo "Checking for $BLAS_DIR/include"
        test -d $BLAS_DIR/include
        echo "Checking for LAPACK"
        ls -al $BLAS_DIR/include
        test -f $BLAS_DIR/include/lapack.h
        ls -al /usr/local/opt/openblas/lib
        test -f /usr/local/opt/openblas/lib/libopenblas.dylib
        echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$BLAS_DIR/include" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=-I$BLAS_DIR/include" >> $GITHUB_ENV

    - name: Linux OpenBLAS setup - hdf5, libmatio, vtk, doxygen, and (optionally) OpenBLAS via apt
      if: startsWith(matrix.os,'ubuntu') && startswith(matrix.blas,'OpenBLAS')
      run: |
        sudo apt update
        if [[ "${{ matrix.blas }}" == "OpenBLAS" ]]; then
          EXTRA_APT=libopenblas-dev
        fi
        sudo apt -yq install liblapacke-dev doxygen graphviz libhdf5-dev libmatio-dev libvtk7-dev lcov $EXTRA_APT

    - name: Configure
      run: |
        set -x
        cmake -B build \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              ${{env.BLA_STATIC_OPT}} \
              ${{env.BLA_IMPL}} \
              ${{env.BLA_PARA}} \
              ${{env.PYTHON_OPT}} \
              ${{env.DOC_OPT}} \
              ${{env.SDK_OPT}} \
              ${{env.TOOLSET_OPT}} \
              ${{env.PYTHON_INFO_OPT}} \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }} \
              -DCMAKE_CXX_FLAGS=${{ env.CMAKE_CXX_FLAGS }} \
              -DENABLE_WERROR=${{ env.ENABLE_WERROR }} \
              -DTEST_HEAD3=ON

    - name: Build
      run: |
        cmake --build build ${{env.BUILD_OPT}} --config ${{env.BUILD_TYPE}}
        ls -al build
        if [ -d build/wrapping/python/openmeeg ]; then
          ls -al build/wrapping/python/openmeeg
        fi

    - name: Prepare Python
      if: startswith(matrix.python, 'python')
      # Let's make it easy for delvewheel to find the stuff it might need
      run: |
        if [[ ${{matrix.os}} == 'windows'* ]]; then
          cd build
          echo "Before:"
          ls -al *.dll
          if [[ "${{ matrix.linking }}" != "static" ]]; then
            strip $OPENBLAS_LIB/libopenblas_v0.3.18-gcc_8_1_0.dll
            cp $OPENBLAS_LIB/libopenblas_v0.3.18-gcc_8_1_0.dll .
            cp $OPENBLAS_LIB/libopenblas_v0.3.18-gcc_8_1_0.dll openblas.dll
          fi
          cp /mingw64/bin/libgcc_s_seh-1.dll .
          cp /mingw64/bin/libwinpthread-1.dll .
          cp /c/Strawberry/c/bin/libquadmath-0.dll .
          cp /mingw64/bin/libstdc++-6.dll .
          strip libstdc++-6.dll
          strip --help
          ls -al wrapping/python/openmeeg/
          strip wrapping/python/openmeeg/*.pyd
          cp /c/Strawberry/c/bin/libgomp-1.dll .
          cp /mingw64/bin/zlib1.dll .
          cp OpenMEEGMaths/libmatio.dll .
          cp -a *.dll wrapping/python/openmeeg
          cd ..
        fi

    - name: Make, delocate, install, and check wheel
      if: startswith(matrix.python, 'python')
      run: |
        cd build/wrapping/python
        python setup.py bdist_wheel sdist
        echo "Wheels:"
        ls -al dist/*.whl
        unzip dist/*.whl -d check
        echo "Contents before:"
        ls -al check/*
        if [[ ${{matrix.os}} == 'windows'* ]]; then
          PATH="$(cygpath -w $PWD/openmeeg);$PATH" delvewheel show dist/*.whl
          PATH="$(cygpath -w $PWD/openmeeg);$PATH" delvewheel repair dist/*.whl
        elif [[ ${{matrix.os}} == 'macos'* ]]; then
          delocate-wheel dist/*.whl
        # This build uses a toolchain that is too new, so skip this on Linux
        # else
        #   auditwheel show dist/*.whl
        #   auditwheel repair dist/*.whl
        fi
        rm -Rf check
        unzip dist/*.whl -d check
        echo "Contents after:"
        ls -al check/*
        twine check dist/*
        pip install dist/*.whl --force-reinstall
        cd ~
        python -c "import openmeeg; print(openmeeg.__version__)"

    - name: Upload wrapped Python lib
      if: startswith(matrix.python, 'python')
      uses: actions/upload-artifact@v3
      with:
        name: wrapping-${{ matrix.os }}-${{ matrix.blas_linking }}
        path: dist/*.whl

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        ctest -C $BUILD_TYPE || ctest -C $BUILD_TYPE --rerun-failed --output-on-failure
