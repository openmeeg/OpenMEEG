# This CI run does core building+testing of OpenMEEG using various OSes
# and options.

name: Test
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash -el {0}

jobs:

  build:
    continue-on-error: true
    strategy:
      matrix:
        # By default, all builds use:
        # - OpenBLAS
        # - dynamic BLAS linking
        # - cmake to build Python bindings
        # - Python 3.10
        # - The oldest supported version of numpy (numpyold)
        # - MSVC on Windows (if relevant)
        # - No VTK support
        #
        # Deviations from this are noted by additions to the `include`
        # params. Defaults are set up properly in the `env-vars` step,
        # whose `output`s should be used by subsequent steps.
        #
        # MKL is tested on all OSes.
        #
        # VTK and CGAL are only tested on one Ubuntu build.
        #
        # Someday we could use OpenBLAS for Windows once vcpkg sorts things out
        # (https://github.com/microsoft/vcpkg/issues/25176), but it's unclear
        # if this will really help anything. NumPy/SciPy's OpenBLAS (which
        # we use currently) should be well tested already though, so there is
        # perhaps no need to switch.
        include:
        - os: ubuntu-20.04
          blas: OpenBLAS
          blas_linking: dynamic
          python: cmake
          python-version: '3.10'
          numpy: numpyold
        - os: windows-2019
          blas: OpenBLAS
          blas_linking: dynamic
          python: cmake
          windows_compiler: msvc
        - os: macos-latest
          blas: OpenBLAS
          blas_linking: dynamic
          python: cmake
        # Latest OpenBLAS release
        - os: ubuntu-22.04
          blas: OpenBLAS-latest
        # PyPy build
        - os: ubuntu-20.04
          blas: OpenBLAS
          python-version: 'pypy-3.8'
        # One with latest numpy, plus VTK
        - os: ubuntu-22.04
          blas: OpenBLAS
          python-version: '3.10'
          numpy: numpydev
          vtk: vtk9
          cgal: cgal
        # Windows mingw64
        - os: windows-2019
          windows_compiler: mingw64
        # MKL on each OS (static unless it has to be dynamic)
        - os: windows-2019
          blas: mkl-findblas
          blas_linking: static
        - os: ubuntu-20.04
          blas: mkl-findblas
        - os: macos-latest
          blas: mkl-findblas
          blas_linking: static
        # ubuntu-18.04 build, but Python tests currently fail so use no-python
        - os: ubuntu-18.04
          python: no-python
        # Windows static
        - os: windows-2019
          blas: OpenBLAS
          blas_linking: static
        # Setuptools
        - os: ubuntu-20.04
          python: setuptools
        - os: macos-11
          python: setuptools

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    # all subsequent steps should use steps.env-vars.outputs.* instead
    # of matrix.* entries
    - name: Environment variables
      id: env-vars
      run: |
        echo '::set-output name=os::${{matrix.os}}'
        if [[ "${{matrix.numpy}}" == *'dev' ]]; then
          echo '::set-output name=numpy_version::dev'
        else
          echo '::set-output name=numpy_version::oldest'
        fi
        echo '::set-output name=python_version::${{matrix.python-version}}'
        if [[ "${{matrix.python-version}}" == 'pypy'* ]]; then
          echo "OPENMEEG_BAD_PYPY=1" >> $GITHUB_ENV
        fi
        if [[ "${{matrix.blas_linking}}" == 'static' ]]; then
          echo "Enabling static BLAS"
          echo "BLA_STATIC_OPT=-DBLA_STATIC=ON" >> $GITHUB_ENV
          echo '::set-output name=blas_linking::static'
          echo "OPENMEEG_BAD_MKL=1" >> $GITHUB_ENV
        else
          echo '::set-output name=blas_linking::dynamic'
        fi
        if [[ "${{matrix.python}}" == 'no-python' ]]; then
          echo "Disabling Python"
          echo "PYTHON_OPT=-DENABLE_PYTHON=OFF" >> $GITHUB_ENV
          echo '::set-output name=python::no-python'
          echo '::set-output name=python_type::no-python'
        else
          echo '::set-output name=python::python'
          if [[ "${{matrix.python}}" == "" ]] || [[ "${{matrix.python}}" == "cmake" ]]; then
            echo '::set-output name=python_type::cmake'
          elif [[ "${{matrix.python}}" == "setuptools" ]]; then
            echo '::set-output name=python_type::setuptools'
            echo "PYTHON_OPT=-DENABLE_PYTHON=OFF" >> $GITHUB_ENV
          else
            echo "Unknown matrix.python=\"${{matrix.python}}\""
            exit 1
          fi
        fi
        if [[ "${{matrix.windows_compiler}}" == "mingw64" ]]; then
          echo '::set-output name=windows_compiler::mingw64'
        else
          echo '::set-output name=windows_compiler::msvc'
          echo "OPENMEEG_BAD_MSVC=1" >> $GITHUB_ENV
        fi
        if [[ "${{matrix.blas}}" == 'mkl'* ]]; then
          echo "Setting BLA_IMPLEMENTATION=${{matrix.blas}}"
          echo "BLA_IMPL=-DBLA_IMPLEMENTATION=${{matrix.blas}}" >> $GITHUB_ENV
          echo '::set-output name=blas::${{matrix.blas}}'
        else
          echo '::set-output name=blas::OpenBLAS'
        fi
        if [[ "${{matrix.blas}}" == *'-latest' ]]; then
          echo "Setting blas_version=latest"
          echo '::set-output name=blas_version::latest'
        fi
        # Build docs on Ubuntu, not elsewhere (for speed)
        if [[ "${{matrix.os}}" == 'ubuntu'* ]]; then
          DOC_OPT="-DBUILD_DOCUMENTATION=ON"
        else
          DOC_OPT="-DBUILD_DOCUMENTATION=OFF"
        fi
        if [[ "${{matrix.vtk}}" == 'vtk'* ]]; then
          echo '::set-output name=vtk_version::${{matrix.vtk}}'
          VTK_OPT="-DUSE_VTK=ON"
        else
          VTK_OPT="-DUSE_VTK=OFF"
        fi
        if [[ "${{matrix.cgal}}" == 'cgal'* ]]; then
          echo '::set-output name=cgal_version::${{matrix.vtk}}'
          CGAL_OPT="-DUSE_CGAL=ON"
        else
          CGAL_OPT="-DUSE_CGAL=OFF"
        fi
        # Use -Werror on Windows and macOS, eventually should use on Linux
        if [[ "${{matrix.os}}" != 'ubuntu*' ]]; then
          WERROR_OPT="-DENABLE_WERROR=OFF"
        else
          WERROR_OPT="-DENABLE_WERROR=ON"
        fi
        # On windows, copy the runtime DLLs
        if [[ "${{matrix.os}}" == 'windows'* ]]; then
          PYTHON_COPY_RUNTIME_DLLS_OPT="-DPYTHON_COPY_RUNTIME_DLLS=ON"
        fi
        echo "Using WERROR_OPT=$WERROR_OPT"
        echo "WERROR_OPT=$WERROR_OPT" >> $GITHUB_ENV
        echo "Using DOC_OPT=$DOC_OPT"
        echo "DOC_OPT=$DOC_OPT" >> $GITHUB_ENV
        echo "Using VTK_OPT=$VTK_OPT"
        echo "VTK_OPT=$VTK_OPT" >> $GITHUB_ENV
        echo "CGAL_OPT=$CGAL_OPT" >> $GITHUB_ENV
        echo "Using PYTHON_COPY_RUNTIME_DLLS=$PYTHON_COPY_RUNTIME_DLLS_OPT"
        echo "PYTHON_COPY_RUNTIME_DLLS_OPT=$PYTHON_COPY_RUNTIME_DLLS_OPT" >> $GITHUB_ENV

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ steps.env-vars.outputs.os }}

    # Use conda for all Python except PyPy
    - name: Python via conda
      uses: conda-incubator/setup-miniconda@v2
      if: startswith(steps.env-vars.outputs.python, 'python') && !startswith(steps.env-vars.outputs.python_version, 'pypy')
      with:
        activate-environment: "test"
        python-version: "3.10"
        channels: conda-forge
        channel-priority: strict
    - name: Python via setup-python
      uses: actions/setup-python@v4
      if: startswith(steps.env-vars.outputs.python, 'python') && startswith(steps.env-vars.outputs.python_version, 'pypy')
      with:
        python-version: ${{ steps.env-vars.outputs.python_version }}

    - name: Python packages
      if: startswith(steps.env-vars.outputs.python, 'python')
      run: |
        which python
        python --version
        which pip
        pip --version
        pip install --upgrade -q pip
        if [[ ${{steps.env-vars.outputs.os}} == 'windows'* ]]; then
          EXTRA_PIP=delvewheel
        elif [[ ${{steps.env-vars.outputs.os}} == 'macos'* ]]; then
          EXTRA_PIP=delocate
        else
          EXTRA_PIP=auditwheel
        fi
        if [[ ${{steps.env-vars.outputs.numpy_version}} == 'dev' ]]; then
          echo "Installing NumPy main"
        	pip install --upgrade --pre --only-binary ":all:" --default-timeout=60 -i "https://pypi.anaconda.org/scipy-wheels-nightly/simple" numpy
        else
          echo "Installing oldest supported NumPy"
          IS_PYPY=$(python -c "import sys; print(int('pypy' in sys.implementation.name))")
          if [[ "$IS_PYPY" == "1" ]]; then
            NUMPY_PIP="numpy==1.23.0"
          else
            NUMPY_PIP="oldest-supported-numpy"
          fi
        fi
        pip install --upgrade --progress-bar off --only-binary="numpy" -q $NUMPY_PIP setuptools wheel twine pytest $EXTRA_PIP

    - name: MKL setup - mkl via conda
      if: startswith(steps.env-vars.outputs.blas,'mkl')
      run: |
        # To get a local testing env, you can do for example:
        # $ conda create -n openmeeg-mkl -c conda-forge --strict-channel-priority mkl-devel swig libmatio hdf5 numpy
        # $ conda activate openmeeg-mkl
        #
        # On Windows, locally this static build almost works:
        # ./build_tools/cmake_configure.sh -DBLA_IMPLEMENTATION=mkl-findblas -DBLA_STATIC=ON -DCMAKE_PREFIX_PATH="$CONDA_PREFIX/Library" -DCMAKE_CXX_FLAGS="-I$CONDA_PREFIX/Library/include" -DENABLE_PYTHON=ON
        # cmake --build build --config Release
        #
        # On Linux, locally this works:
        # ./build_tools/cmake_configure.sh -DBLA_IMPLEMENTATION=mkl-findblas -DCMAKE_PREFIX_PATH="$CONDA_PREFIX/lib" -DCMAKE_CXX_FLAGS="-I$CONDA_PREFIX/include" -DENABLE_PYTHON=ON
        # cmake --build build --config Release
        # cd build && LD_PRELOAD=$CONDA_PREFIX/lib/libmkl_rt.so ctest -C Release
        #
        conda install -c conda-forge -q mkl-devel
        echo "$CONDA_PREFIX/lib/*mkl*:"
        if [[ "${{steps.env-vars.outputs.os}}" == 'windows'* ]]; then
          ls -alR $(cygpath -u $CONDA_PREFIX)/Library/lib/*mkl*
          echo "CMAKE_PREFIX_PATH=$(cygpath -m $CONDA_PREFIX/Library)" >> $GITHUB_ENV
          echo "CMAKE_CXX_FLAGS=-I$(cygpath -m $CONDA_PREFIX/Library/include) ${CMAKE_CXX_FLAGS}" >> $GITHUB_ENV
        else
          ls -alR $CONDA_PREFIX/lib/*mkl*
          echo "CMAKE_PREFIX_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV
          echo "CMAKE_CXX_FLAGS=-I$CONDA_PREFIX/include ${CMAKE_CXX_FLAGS}" >> $GITHUB_ENV
          if [[ "${{steps.env-vars.outputs.os}}" == 'ubuntu'* ]]; then
            echo "LD_PRELOAD=$CONDA_PREFIX/lib/libmkl_rt.so" >> $GITHUB_ENV
          fi
        fi

    - name: Windows 1 - cache vcpkg
      if: startswith(steps.env-vars.outputs.os,'windows')
      uses: actions/cache@v3
      with:
        path: |
          vcpkg
          build/vcpkg_installed
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-${{ steps.env-vars.outputs.windows_compiler }}-0

    - name: Windows 2 - hdf5 and libmatio via vcpkg
      if: startsWith(steps.env-vars.outputs.os,'windows')
      id: runvcpkg
      run: |
        if [[ "${{ steps.env-vars.outputs.windows_compiler }}" == "mingw64" ]]; then
          export VCPKG_DEFAULT_TRIPLET="x64-mingw-dynamic"
        else
          export VCPKG_DEFAULT_TRIPLET="x64-windows-release"
          export CMAKE_GENERATOR="Visual Studio 16 2019"
        fi
        source ./build_tools/setup_vcpkg_compilation.sh
        # On Windows, we tell cmake to copy all runtime deps to the build dir,
        # and for tests (and Python) to find them, we need to add it to PATH
        echo "PATH=$(cygpath -w ${PWD}/build);$PATH" >> $GITHUB_ENV

    - name: Windows 3 - OpenBLAS via MacPython download
      if: startsWith(steps.env-vars.outputs.blas,'OpenBLAS') && startsWith(steps.env-vars.outputs.os,'windows')
      run: |
        # OpenBLAS direct download (too slow to build using vcpkg)
        # and renaming to match what cmake wants to see
        source ./build_tools/download_openblas.sh windows
        echo "OPENBLAS_LIB=$OPENBLAS_LIB" >> $GITHUB_ENV
        echo "OPENBLAS_INCLUDE=$OPENBLAS_INCLUDE" >> $GITHUB_ENV
        echo "LIB=$LIB" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=$CMAKE_CXX_FLAGS" >> $GITHUB_ENV

    - name: macOS - hdf5, libmatio, libomp and (optionally) OpenBLAS via brew
      if: startswith(steps.env-vars.outputs.os,'macos')
      run: |
        brew update > /dev/null
        if [[ "${{steps.env-vars.outputs.blas}}" == "OpenBLAS" ]]; then
          BREW_EXTRA=openblas
        fi
        brew install hdf5 libmatio libomp boost swig $BREW_EXTRA
        if [[ "${{steps.env-vars.outputs.blas}}" == "OpenBLAS" ]]; then
          BLAS_DIR=/usr/local/opt/openblas
          OPENBLAS_INCLUDE=$BLAS_DIR/include
          OPENBLAS_LIB=$BLAS_DIR/lib
          echo "Checking for $OPENBLAS_INCLUDE"
          test -d "$OPENBLAS_INCLUDE"
          echo "Checking for LAPACK"
          ls -al $OPENBLAS_INCLUDE
          test -f "$OPENBLAS_INCLUDE/lapack.h"
          ls -al $OPENBLAS_LIB
          test -f "$OPENBLAS_LIB/libopenblas.dylib"
          echo "OPENBLAS_INCLUDE=$OPENBLAS_INCLUDE" >> $GITHUB_ENV
          echo "CMAKE_CXX_FLAGS=-I$OPENBLAS_INCLUDE -L$OPENBLAS_LIB" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$BLAS_DIR" >> $GITHUB_ENV
        fi

    - name: Linux - hdf5, libmatio, and doxygen; optionally vtk, cgal, and OpenBLAS via apt
      if: startsWith(steps.env-vars.outputs.os,'ubuntu')
      run: |
        sudo apt update -q
        APT_EXTRA=""
        if [[ "${{ steps.env-vars.outputs.blas }}" == "OpenBLAS" ]] && [[ "${{ steps.env-vars.outputs.blas_version }}" != "latest" ]]; then
          APT_EXTRA="$APT_EXTRA libopenblas-dev"
        fi
        if [[ "${{ steps.env-vars.outputs.blas }}" == "OpenBLAS-latest" ]]; then
          APT_EXTRA="$APT_EXTRA g++-12 gcc-12 gfortran-12"
        fi
        if [[ "${{ steps.env-vars.outputs.vtk_version }}" != "" ]]; then
          APT_EXTRA="$APT_EXTRA lib${{ steps.env-vars.outputs.vtk_version }}-dev"
        fi
        if [[ "${{ steps.env-vars.outputs.vtk_version }}" != "" ]]; then
          APT_EXTRA="$APT_EXTRA lib${{ steps.env-vars.outputs.cgal_version }}-dev"
        fi
        sudo apt -yq install liblapacke-dev doxygen graphviz libhdf5-dev libmatio-dev lcov $APT_EXTRA
        # Set GCC version
        if [[ "${{ steps.env-vars.outputs.blas }}" == "OpenBLAS-latest" ]]; then
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12
        fi
        gcc --version

    - name: Linux - OpenBLAS via GitHub
      if: startsWith(steps.env-vars.outputs.os,'ubuntu') && startsWith(steps.env-vars.outputs.blas_version,'latest')
      run: |
        curl -LO https://github.com/xianyi/OpenBLAS/archive/refs/tags/v0.3.20.tar.gz
        tar xzf v0.3.20.tar.gz
        ls -al
        cd OpenBLAS-0.3.20
        ls -alR .
        make NO_FORTRAN=0 NO_STATIC=0 NO_DYNAMIC=0 NUM_THREADS=24 NO_WARMUP=1
        sudo make install PREFIX=/usr/local

    - name: Configure
      run: |
        if [[ "${{steps.env-vars.outputs.os}}" == 'windows'* ]]; then
          export EXTRA_UCRT="-DCMAKE_INSTALL_UCRT_LIBRARIES=TRUE"
        elif [[ "${{steps.env-vars.outputs.os}}" == 'ubuntu'* ]]; then
          export EXTRA_COV="-DENABLE_COVERAGE=ON"
        fi
        EXT_SUFFIX=$(python -c "import sysconfig;print(sysconfig.get_config_var('EXT_SUFFIX'))")
        source ./build_tools/cmake_configure.sh --install-prefix=$PWD/install -DCMAKE_VERBOSE_MAKEFILE=ON $EXTRA_UCRT $EXTRA_COV -DPython3_EXT_SUFFIX=$EXT_SUFFIX -DPYTHON_FORCE_EXT_SUFFIX=ON

    - name: Build
      run: |
        cmake --build build --config ${{env.BUILD_TYPE}}
        ls -al build
        if [ -d build/wrapping/python/openmeeg ]; then
          ls -alR build/wrapping/python/openmeeg
        else
          echo "No Python wrapping found"
        fi

    - name: Install
      run: |
        cmake --build build --target install --config Release

    - name: Prepare for delocate
      if: startswith(steps.env-vars.outputs.python, 'python')
      # Let's make it easy for delvewheel to find the stuff it might need
      run: |
        cd build
        if [[ "${{steps.env-vars.outputs.os}}" == 'windows'* ]]; then
          echo "All:"
          find . -type f -iname "*.dll"
          echo "Data:"
          find . -type f -name "Head1.geom"
          echo "Before:"
          ls -al *.dll || true
          if [[ "${{steps.env-vars.outputs.blas}}" == "OpenBLAS" ]]; then
            #if [[ "${{ steps.env-vars.outputs.blas_linking }}" != "static" ]]; then
            if [[ "{{ steps.env-vars.outputs.windows_compiler }}" != "msvc"* ]]; then
              strip $OPENBLAS_LIB/libopenblas_v*.dll
            fi
            cp $OPENBLAS_LIB/libopenblas_v*.dll .
            cp $OPENBLAS_LIB/libopenblas_v*.dll openblas.dll
            #fi
          fi;
          if [[ "{{ steps.env-vars.outputs.windows_compiler }}" != "msvc"* ]]; then
            cp /c/Strawberry/c/bin/libquadmath-0.dll .
            cp /mingw64/bin/libgcc_s_seh-1.dll .
            cp /mingw64/bin/libwinpthread-1.dll .
            cp /mingw64/bin/libstdc++-6.dll .
            strip libstdc++-6.dll
            cp /c/Strawberry/c/bin/libgomp-1.dll .
            cp /mingw64/bin/zlib1.dll .
          fi
          if [[ -f "./OpenMEEGMaths/libmatio.dll" ]]; then
            cp ./OpenMEEGMaths/libmatio.dll .
          elif [[ -f "./OpenMEEGMaths/Release/libmatio.dll" ]]; then
            cp ./OpenMEEGMaths/Release/libmatio.dll .
            cp ./OpenMEEGMaths/Release/zlib1.dll .
            cp ./OpenMEEGMaths/Release/hdf5.dll .
          fi
          echo "After:"
          ls -al *.dll || true
          if [[ "${{steps.env-vars.outputs.python_type}}" == 'cmake' ]]; then
            cp -a *.dll wrapping/python/openmeeg
          else
            cp -a *.dll ../wrapping/python/openmeeg
          fi
        fi
        cat OpenMEEGConfigure.h

    - name: Check installed binaries and Python wrapper
      run: |
        ls -alR ./install/bin ./install/lib
        if [[ "${{steps.env-vars.outputs.os}}" == 'windows'* ]]; then
          export PATH="$PWD/build:$PWD/install/bin:$(cygpath -u $CONDA_PREFIX)/Library:$(cygpath -u $CONDA_PREFIX)/Library/lib:$PATH"
          echo "PATH=$PATH"
        elif [[ "${{steps.env-vars.outputs.os}}" == 'macos'* ]]; then
          export DYLD_LIBRARY_PATH="$CONDA_PREFIX/lib:$PWD/install/lib:$DYLD_LIBRARY_PATH"
          echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH"
        else
          export LD_LIBRARY_PATH="$CONDA_PREFIX/lib:$PWD/install/lib:/usr/local/lib:LD_LIBRARY_PATH"
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        fi
        ./install/bin/om_minverser --help
        if [[ "${{steps.env-vars.outputs.python_type}}" == 'cmake' ]]; then
          PYVER=$(python -c "import sys; print('.'.join(sys.version.split('.')[:2]))")
          PYNAME=$(python -c "import sys; print('pypy' if 'pypy' in sys.implementation.name else 'python')")
          if [[ "${{steps.env-vars.outputs.os}}" == 'windows'* ]]; then
            export PYTHONPATH=$PWD/install/lib/site-packages
            curl -LO https://github.com/lucasg/Dependencies/releases/download/v1.11.1/Dependencies_x64_Release.zip
            unzip Dependencies_x64_Release.zip -d Dependencies
            # Ideally this would not be necessary but it makes things work
            cp build/*.dll $PWD/install/lib/site-packages/openmeeg/
            ./Dependencies/Dependencies.exe -modules $PWD/install/lib/site-packages/openmeeg/_openmeeg.pyd
          else
            export PYTHONPATH=$PWD/install/lib/${PYNAME}${PYVER}/site-packages
          fi
          echo "PYTHONPATH=$PYTHONPATH"
          python -c "import openmeeg; print(openmeeg.sqr(4)); assert openmeeg.sqr(4) == 16"
        fi

    - name: Create, delocate, check, install, and test wheel
      if: startswith(steps.env-vars.outputs.python, 'python')
      id: wheel
      run: |
        if [[ "${{steps.env-vars.outputs.python_type}}" == 'setuptools' ]]; then
          export OPENMEEG_INCLUDE=$PWD/install/include/OpenMEEG
          export OPENMEEG_LIB=$PWD/install/lib
          export OPENMEEG_USE_SWIG=1
          if [[ "${{steps.env-vars.outputs.os}}" == 'windows'* ]]; then
            export PATH="$PWD/build:$PWD/install/bin:$(cygpath -u $CONDA_PREFIX)/Library:$(cygpath -u $CONDA_PREFIX)/Library/lib:$PATH"
            export OPENMEEG_LIB=$(cygpath -w $OPENMEEG_LIB)
            export OPENMEEG_INCLUDE=$(cygpath -w $OPENMEEG_INCLUDE)
            if [[ "${{steps.env-vars.outputs.windows_compiler}}" == 'msvc'* ]]; then
              export CL="/std:c++17"
            fi
            export SWIG_FLAGS="msvc"
            echo "PATH=$PATH"
            echo "CL=$CL"
          elif [[ "${{steps.env-vars.outputs.os}}" == 'macos'* ]]; then
            export DYLD_LIBRARY_PATH="$CONDA_PREFIX/lib:$PWD/install/lib:$DYLD_LIBRARY_PATH"
            export CPATH="$OPENBLAS_INCLUDE:$CPATH"
            echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH"
            echo "CPATH=$CPATH"
          else
            export LD_LIBRARY_PATH="$CONDA_PREFIX/lib:$PWD/install/lib:/usr/local/lib:LD_LIBRARY_PATH"
            export LIBRARY_PATH="$CONDA_PREFIX/lib:$PWD/install/lib:/usr/local/lib:LIBRARY_PATH"
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
          fi
          cd wrapping/python  # in root
          echo '::set-output name=path::wrapping/python/dist/*.whl'
        else
          cd build/wrapping/python  # in build subdirectory
          echo '::set-output name=path::build/wrapping/python/dist/*.whl'
        fi
        pwd
        python setup.py bdist_wheel sdist
        echo "Wheels:"
        ls -alR dist/*.whl
        unzip dist/*.whl -d check
        echo "Contents before:"
        ls -alR check/*
        if [[ ${{steps.env-vars.outputs.os}} == 'windows'* ]]; then
          PATH="$(cygpath -w $PWD/openmeeg);$PATH" delvewheel show dist/*.whl
          PATH="$(cygpath -w $PWD/openmeeg);$PATH" delvewheel repair -w dist dist/*.whl
        elif [[ ${{steps.env-vars.outputs.os}} == 'macos'* ]]; then
          delocate-wheel -v dist/*.whl
          delocate-listdeps --all dist/*.whl
        # This build uses a toolchain that is too new, so skip this on Linux
        # else
        #   auditwheel show dist/*.whl
        #   auditwheel repair dist/*.whl
        fi
        rm -Rf check
        unzip dist/*.whl -d check
        echo "Contents after:"
        ls -alR check/*
        twine check dist/*
        pip install dist/*.whl --force-reinstall
        cd ~
        python -c "import openmeeg; print(openmeeg.__version__)"
        ${GITHUB_WORKSPACE}/build_tools/cibw_test_command.sh ${GITHUB_WORKSPACE}
        pip uninstall -yq openmeeg
        # Now make it so our tests can find the libs
        if [[ ${{steps.env-vars.outputs.os}} == 'windows'* ]]; then
          echo "PYTHONPATH=$(cygpath -w ${PWD}/build);$PYTHONPATH" >> $GITHUB_ENV
        fi

    - name: Upload wrapped Python lib
      if: startswith(steps.env-vars.outputs.python, 'python')
      uses: actions/upload-artifact@v3
      with:
        name: wrapping-${{ steps.env-vars.outputs.os }}_${{ steps.env-vars.outputs.python_type }}_${{ steps.env-vars.outputs.blas }}_${{ steps.env-vars.outputs.blas_linking }}_${{ steps.env-vars.outputs.windows_compiler }}
        path: ${{ steps.wheel.outputs.path }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        ctest -C $BUILD_TYPE || ctest -C $BUILD_TYPE --rerun-failed --output-on-failure

    - name: Prepare coverage
      if: startsWith(steps.env-vars.outputs.os,'ubuntu')
      run: |
        lcov --directory . --capture --output-file coverage.info # capture coverage info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
        lcov --remove coverage.info '*numpy/*' --output-file coverage.info # filter out NumPy
        lcov --list coverage.info

    - name: Upload coverage to CodeCov
      uses: codecov/codecov-action@v3
      if: startsWith(steps.env-vars.outputs.os,'ubuntu')
      with:
        files: coverage.info
