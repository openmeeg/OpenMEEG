name: Test
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash -el {0}

jobs:

  build:
    continue-on-error: true
    strategy:
      matrix:
        # Currently, VTK is only installed+tested on Ubuntu
        # Someday we could use OpenBLAS for Windows once vcpkg sorts things out
        # (https://github.com/microsoft/vcpkg/issues/25176), but it's unclear
        # if this will really help anything. SciPy's should be well tested
        # already.
        os: [ubuntu-20.04, windows-2019, macos-latest]
        blas: [OpenBLAS]
        blas_linking: [dynamic]
        python: [python]
        include:
        - os: windows-2019
          blas: mkl-findblas
          blas_linking: static
          python: python
        ## ubuntu-18.04 build, but Python tests currently fail so use no-python
        #- os: ubuntu-18.04
        #  blas: OpenBLAS
        #  blas_linking: dynamic
        #  python: no-python
        ## Windows static build
        #- os: windows-2019
        #  blas: OpenBLAS
        #  blas_linking: static
        #  python: python

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Environment variables
      run: |
        if [ ${{matrix.blas_linking}} == 'static' ]; then
          echo "BLA_STATIC_OPT='-DBLA_STATIC=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.python}} != 'python' ]; then
          echo "PYTHON_OPT=-DENABLE_PYTHON=OFF" >> $GITHUB_ENV
        else
          echo "PYTHON_OPT=-DENABLE_PYTHON=ON" >> $GITHUB_ENV
        fi
        echo "BLA_IMPL=-DBLA_IMPLEMENTATION=${{matrix.blas}}" >> $GITHUB_ENV
        # Build docs on Ubuntu, not elsewhere (for speed)
        if [[ ${{matrix.os}} == 'ubuntu'* ]]; then
          BUILD_DOCS=ON
        else
          BUILD_DOCS=OFF
        fi
        # Use -Werror on Windows and macOS, eventually should use on Linux
        if [[ ${{matrix.os}} != 'ubuntu*' ]]; then
          WERROR_OPT="-DENABLE_WERROR=OFF"
        else
          WERROR_OPT="-DENABLE_WERROR=ON"
        fi
        echo "WERROR_OPT=$WERROR_OPT" >> $GITHUB_ENV
        echo "DOC_OPT=-DBUILD_DOCUMENTATION=$BUILD_DOCS" >> $GITHUB_ENV

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}

    # Always use conda for Python
    - name: Python via conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: "test"
        python-version: "3.10"
        channels: conda-forge
        channel-priority: strict

    - name: Python packages
      if: startswith(matrix.python, 'python')
      run: |
        pip install --upgrade -q pip
        if [[ ${{matrix.os}} == 'windows'* ]]; then
          EXTRA_PIP=delvewheel
        elif [[ ${{matrix.os}} == 'macos'* ]]; then
          EXTRA_PIP=delocate
        else
          EXTRA_PIP=auditwheel
        fi
        pip install --upgrade --progress-bar off -q numpy setuptools wheel twine $EXTRA_PIP
        # Fix Miniconda paths
        echo "PYTHON_INFO_OPT=-DPython3_EXECUTABLE=$(which python)" >> $GITHUB_ENV

    - name: Windows 1 - cache vcpkg
      if: startswith(matrix.os,'windows')
      uses: actions/cache@v3
      with:
        path: |
          vcpkg
          build/vcpkg_installed
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-mingw64-0

    - name: Windows 2 - hdf5 and libmatio via vcpkg
      if: startsWith(matrix.os,'windows')
      id: runvcpkg
      run: |
        export VCPKG_DEFAULT_TRIPLET=x64-mingw-dynamic
        source ./build_tools/setup_windows_compilation.sh

    - name: Windows 3 - OpenBLAS via MacPython download
      if: startsWith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      run: |
        # OpenBLAS direct download (too slow to build using vcpkg)
        # and renaming to match what cmake wants to see
        curl -LO https://anaconda.org/multibuild-wheels-staging/openblas-libs/v0.3.18/download/openblas-v0.3.18-win_amd64-gcc_8_1_0.zip
        unzip openblas-v0.3.18-win_amd64-gcc_8_1_0.zip -d openblas
        OPENBLAS_LIB=${PWD}/openblas/64/lib
        OPENBLAS_INCLUDE=${PWD}/openblas/64/include
        echo "$OPENBLAS_LIB"
        test -d "$OPENBLAS_LIB"
        echo "$OPENBLAS_INCLUDE"
        test -d "$OPENBLAS_INCLUDE"
        cd $OPENBLAS_LIB
        ls -al
        if [[ "${{ matrix.linking }}" != "static" ]]; then
          cp ../bin/libopenblas_v0.3.18-gcc_8_1_0.dll .
          cp libopenblas_v0.3.18-gcc_8_1_0.dll openblas.dll
          mv libopenblas_v0.3.18-gcc_8_1_0.dll.a openblas.dll.a
        fi
        mv libopenblas_v0.3.18-gcc_8_1_0.a openblas.a
        mv libopenblas_v0.3.18-gcc_8_1_0.def openblas.def
        mv libopenblas_v0.3.18-gcc_8_1_0.exp openblas.exp
        mv libopenblas_v0.3.18-gcc_8_1_0.lib openblas.lib
        cd ../../../
        echo "OPENBLAS_LIB=$OPENBLAS_LIB" >> $GITHUB_ENV
        echo "LIB=$(cygpath -w $OPENBLAS_LIB);${LIB}" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=-I$(cygpath -m $OPENBLAS_INCLUDE)" >> $GITHUB_ENV

    - name: macOS - hdf5, libmatio, and (optionally) openblas via brew
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'macos')
      run: |
        brew update > /dev/null
        brew install hdf5 libmatio boost swig
        if [[ "${{ matrix.blas }}" == "OpenBLAS" ]]; then
          brew install openblas
          BLAS_DIR=/usr/local/opt/openblas
          echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$BLAS_DIR/include" >> $GITHUB_ENV
          echo "CMAKE_CXX_FLAGS=-I$BLAS_DIR/include" >> $GITHUB_ENV
        fi

    - name: Linux - hdf5, libmatio, vtk, doxygen, and (optionally) OpenBLAS via apt
      if: startsWith(matrix.os,'ubuntu')
      run: |
        sudo apt update
        if [[ "${{ matrix.blas }}" == "OpenBLAS" ]]; then
          EXTRA_APT=libopenblas-dev
        fi
        sudo apt -yq install liblapacke-dev doxygen graphviz libhdf5-dev libmatio-dev libvtk7-dev lcov $EXTRA_APT

    - name: MKL
      if: startswith(matrix.blas,'mkl')
      run: |
        # On Windows, locally this works:
        # ./build_tools/cmake_configure.sh -DBLA_IMPLEMENTATION=mkl-findblas -DBLA_STATIC=ON -DCMAKE_PREFIX_PATH="$CONDA_PREFIX/Library" -DCMAKE_CXX_FLAGS="-I$CONDA_PREFIX/Library/include"
        conda install mkl mkl-include mkl-devel
        if [[ "${{matrix.os}}" == 'windows'* ]]; then
          echo "CMAKE_PREFIX_PATH=-I$(cygpath -m $CONDA_PREFIX/Library)" >> $GITHUB_ENV
        fi

    - name: Configure
      run: |
        source ./build_tools/cmake_configure.sh

    - name: Build
      run: |
        cmake --build build --config ${{env.BUILD_TYPE}}
        ls -al build
        if [ -d build/wrapping/python/openmeeg ]; then
          ls -al build/wrapping/python/openmeeg
        fi

    - name: Prepare Python
      if: startswith(matrix.python, 'python')
      # Let's make it easy for delvewheel to find the stuff it might need
      run: |
        if [[ ${{matrix.os}} == 'windows'* ]]; then
          cd build
          echo "Before:"
          ls -al *.dll
          if [[ "${{ matrix.linking }}" != "static" ]]; then
            strip $OPENBLAS_LIB/libopenblas_v0.3.18-gcc_8_1_0.dll
            cp $OPENBLAS_LIB/libopenblas_v0.3.18-gcc_8_1_0.dll .
            cp $OPENBLAS_LIB/libopenblas_v0.3.18-gcc_8_1_0.dll openblas.dll
          fi
          cp /mingw64/bin/libgcc_s_seh-1.dll .
          cp /mingw64/bin/libwinpthread-1.dll .
          cp /c/Strawberry/c/bin/libquadmath-0.dll .
          cp /mingw64/bin/libstdc++-6.dll .
          strip libstdc++-6.dll
          cp /c/Strawberry/c/bin/libgomp-1.dll .
          cp /mingw64/bin/zlib1.dll .
          cp OpenMEEGMaths/libmatio.dll .
          cp -a *.dll wrapping/python/openmeeg
          cd ..
        fi

    - name: Make, delocate, install, and check wheel
      if: startswith(matrix.python, 'python')
      run: |
        cd build/wrapping/python
        python setup.py bdist_wheel sdist
        echo "Wheels:"
        if [[ ${{matrix.os}} == 'windows'* ]]; then
          PATH="$(cygpath -w $PWD/openmeeg);$PATH" delvewheel show dist/*.whl
          PATH="$(cygpath -w $PWD/openmeeg);$PATH" delvewheel repair -w dist dist/*.whl
        elif [[ ${{matrix.os}} == 'macos'* ]]; then
          delocate-wheel dist/*.whl
        # This build uses a toolchain that is too new, so skip this on Linux
        # else
        #   auditwheel show dist/*.whl
        #   auditwheel repair dist/*.whl
        fi
        unzip dist/*.whl -d check
        echo "Contents after:"
        ls -al check/*
        twine check dist/*
        pip install dist/*.whl --force-reinstall
        cd ~
        python -c "import openmeeg; print(openmeeg.__version__)"
        pip uninstall -yq openmeeg
        # Now make it so our tests can find the libs
        if [[ ${{matrix.os}} == 'windows'* ]]; then
          echo "PYTHONPATH=$(cygpath -w ${PWD}/build);$PYTHONPATH" >> $GITHUB_ENV
        fi

    - name: Upload wrapped Python lib
      if: startswith(matrix.python, 'python')
      uses: actions/upload-artifact@v3
      with:
        name: wrapping-${{ matrix.os }}-${{ matrix.blas_linking }}
        path: build/wrapping/python/dist/*.whl

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        ctest -C Release || ctest -C Release --rerun-failed --output-on-failure
