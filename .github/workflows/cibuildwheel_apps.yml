# This CI run builds wheels using the cibuildwheel infrastructure.
# This means it:
# - Uses as old dependencies/infrastructure as possible:
#   - An old manylinux docker container on Linux
#   - An old MACOSX_DEPLOYMENT_TARGET on macOS
#   - An old SYSTEM_VERSION target on Windows
# - Builds OpenMEEG
# - Creates wheels
# - Delocates them
# - Uploads them to TestPyPI (main) or PyPi (releases)
# Most of the config lives in `pyproject.toml` and build_tools/cibw_* scripts.

name: installers
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

# https://cibuildwheel.readthedocs.io/en/stable/setup/#github-actions
jobs:
  apps:
    continue-on-error: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-20.04
        - os: macos-11
          archs_macos: "x86_64"
        - os: macos-11
          archs_macos: "arm64"
        - os: windows-2019

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: pypa/cibuildwheel@v2.8.0
        with:
          package-dir: ./wrapping/python
          output-dir: installers
        env:
          CIBW_ARCHS_MACOS: "${{matrix.archs_macos}}"
          CIBW_ENVIRONMENT_LINUX: "RUNNER_OS=Linux"
          CIBW_ENVIRONMENT_MACOS: ""
          CIBW_ENVIRONMENT_WINDOWS: ""
          CIBW_BUILD: "cp310-*"
          CIBW_BEFORE_ALL: "bash {project}/build_tools/cibw_before_all_apps.sh {project}"
          CIBW_BEFORE_BUILD_WINDOWS: ""
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""
          CIBW_TEST_COMMAND: "bash {project}/build_tools/cibw_test_command_apps.sh {project}"
      - uses: actions/upload-artifact@v3
        with:
          path: ./installers/*

  release:
    needs: [apps]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
      - run: echo '::set-output name=pattern::OpenMEEG-*-*.*'
        id: filename
      - run:
          set -ex
          ls -alR . && rm ./*.whl
          echo "${{ steps.filename.outputs.pattern }}"
          ls -al "${{ steps.filename.outputs.pattern }}"
          test $(ls -al "${{ steps.filename.outputs.pattern }}" | wc -l) == "4"
      - uses: ncipollo/release-action@v1
        #if: github.ref_type == 'tag'
        with:
          artifacts: "${{ steps.filename.outputs.pattern }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: true
          allowUpdates: true
          generateReleaseNotes: true
