name: Test
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash -el {0}

jobs:

  build:
    continue-on-error: true
    strategy:
      matrix:
        # TODO: MKL currently untested on any platform
        # TODO: static (BLAS linking) builds currently untested on any platform
        # Someday we could use OpenBLAS for Windows once vcpkg sorts things out
        # (https://github.com/microsoft/vcpkg/issues/25176), but it's unclear
        # if this will really help anything. SciPy's should be well tested
        # already.
        os: [ubuntu-20.04, windows-2019, macos-latest]
        blas: [OpenBLAS]
        blas_linking: [dynamic]
        python: [python]
        include:
        # ubuntu-18.04 build, but Python tests currently fail so use no-python
        - os: ubuntu-18.04
          blas: OpenBLAS
          blas_linking: dynamic
          python: no-python

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Environment setup
      run: |
        if [ ${{matrix.blas_linking}} == 'static' ]; then
          echo "BLA_STATIC_OPT='-DBLA_STATIC=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.python}} == 'python' ]; then
          echo "PYTHON_OPT='-DENABLE_PYTHON=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.blas}} == 'MKL' ]; then
          echo "BLA_IMPL=-DBLA_IMPLEMENTATION=MKL" >> $GITHUB_ENV
          echo "BLA_PARA=-DMKL_PARALLELISM=sequential" >> $GITHUB_ENV
        fi
        # Build docs on Ubuntu, not elsewhere (for speed)
        if [[ ${{matrix.os}} == 'ubuntu'* ]]; then
          BUILD_DOCS=ON
        else
          BUILD_DOCS=OFF
        fi
        # Use -Werror on Windows, eventually should use everywhere
        if [[ ${{matrix.os}} == 'windows*' ]]; then
          ENABLE_WERROR=ON
        else
          ENABLE_WERROR=OFF
        fi
        echo "ENABLE_WERROR=$ENABLE_WERROR" >> $GITHUB_ENV
        echo "DOC_OPT=-DBUILD_DOCUMENTATION=$BUILD_DOCS" >> $GITHUB_ENV

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}

    # Windows only -- we can use the default Python3 for Linux + macOS
    - name: Windows OpenBLAS setup 1 - install Python
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # For MKL we'll always use conda
    - uses: conda-incubator/setup-miniconda@v2
      if: startswith(matrix.blas,'MKL')
      with:
        activate-environment: "test"
        python-version: "3.10"
        channels: conda-forge
        channel-priority: strict

    - name: MKL setup - mkl, hdf5, and libmatio via conda
      if: startswith(matrix.blas,'MKL')
      run: |
        conda install mkl mkl-include numpy hdf5 libmatio swig

    - name: Windows OpenBLAS setup 2 - set env and install NumPy via pip
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      run: |
        VCPKG_INSTALLED_DIR="${PWD}/build/vcpkg_installed"
        echo "$VCPKG_INSTALLED_DIR"
        VCPKG_INSTALLED_DIR=$(cygpath -m "$VCPKG_INSTALLED_DIR")
        echo "$VI"
        echo "VCPKG_INSTALLED_DIR=$VCPKG_INSTALLED_DIR" >> $GITHUB_ENV
        VCPKG_DEFAULT_TRIPLET=x64-windows-release
        echo "VCPKG_DEFAULT_TRIPLET=$VCPKG_DEFAULT_TRIPLET" >> $GITHUB_ENV
        echo "VCPKG_DEFAULT_HOST_TRIPLET=$VCPKG_DEFAULT_TRIPLET" >> $GITHUB_ENV
        VCPKG_INSTALL_OPTIONS="--x-install-root=$VCPKG_INSTALLED_DIR --triplet=$VCPKG_DEFAULT_TRIPLET"
        echo "VCPKG_INSTALL_OPTIONS=$VCPKG_INSTALL_OPTIONS" >> $GITHUB_ENV

        CMAKE_TOOLCHAIN_FILE=${PWD}/vcpkg/scripts/buildsystems/vcpkg.cmake
        echo "$CMAKE_TOOLCHAIN_FILE"
        CMAKE_TOOLCHAIN_FILE=$(cygpath -m "$CMAKE_TOOLCHAIN_FILE")
        echo "$CMAKE_TOOLCHAIN_FILE"
        echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> $GITHUB_ENV

        pip install --upgrade -q pip
        pip install --upgrade --progress-bar off -q numpy

    - name: Windows OpenBLAS setup 3 - cache vcpkg
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      uses: actions/cache@v3
      with:
        path: |
          vcpkg
          build/vcpkg_installed
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-2

    - name: Windows OpenBLAS setup 4 - hdf5 and libmatio via vcpkg
      if: startswith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      id: runvcpkg
      run: |
        set -x
        if [ ! -d vcpkg ]; then
          git clone https://github.com/Microsoft/vcpkg.git --depth=1
          cd vcpkg
          git fetch origin 2022.05.10:use --depth=1
          git checkout use
          ./bootstrap-vcpkg.sh
          cd ..
        fi
        ./vcpkg/vcpkg install --recurse $VCPKG_INSTALL_OPTIONS
