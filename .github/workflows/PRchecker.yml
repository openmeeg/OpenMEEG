name: PR Checker
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash -el {0}

jobs:

  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    continue-on-error: true
    strategy:
      matrix:
        # Cover the most useful cases most completely
        # TODO: ubuntu-18.04 Python is broken (tests fail)
        # TODO: ubuntu+MKL Python is broken (symbol not found/linking/path issue)
        # TODO: MKL will not build on Windows
        # TODO: MKL status unknown on macOS
        # TODO: Static build broken for OpenBLAS (Could NOT find LAPACK (missing: LAPACK_LIBRARIES))
        # TODO: Use OpenBLAS for Windows once vcpkg sorts things out (https://github.com/microsoft/vcpkg/issues/25176)
        # os: [ubuntu-20.04, windows-latest, macos-latest]
        os: [windows-latest]
        blas: [OpenBLAS]
        blas_linking: [dynamic]
        python: [python]
        include:
        # Windows static build
        - os: windows-latest
          blas: OpenBLAS
          blas_linking: static
          python: python
        # TODO: UNCOMMENT!
        #  # no-python build
        #  - os: ubuntu-20.04
        #    blas: OpenBLAS
        #    blas_linking: dynamic
        #    python: no-python
        #  # Ubuntu static build
        #  #- os: ubuntu-20.04
        #  #  blas: OpenBLAS
        #  #  blas_linking: static
        #  #  python: python
        #  # ubuntu-18.04 build, but Python tests currently fail so use no-python
        #  - os: ubuntu-18.04
        #    blas: OpenBLAS
        #    blas_linking: dynamic
        #    python: no-python

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Environment setup
      run: |
        if [ ${{matrix.blas_linking}} == 'static' ]; then
          echo "BLA_STATIC_OPT='-DBLA_STATIC=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.python}} == 'python' ]; then
          echo "PYTHON_OPT='-DENABLE_PYTHON=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.blas}} == 'MKL' ]; then
          echo "BLA_IMPL=-DBLA_IMPLEMENTATION=MKL" >> $GITHUB_ENV
          echo "BLA_PARA=-DMKL_PARALLELISM=sequential" >> $GITHUB_ENV
        fi
        # Build docs on Ubuntu, not elsewhere (for speed)
        if [[ ${{matrix.os}} == 'ubuntu'* ]]; then
          BUILD_DOCS=ON
        else
          BUILD_DOCS=OFF
        fi
        echo "DOC_OPT=-DBUILD_DOCUMENTATION=$BUILD_DOCS" >> $GITHUB_ENV

    # We can use the default Python3 for other OSes
    - uses: actions/setup-python@v4
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      with:
        python-version: '3.10'

    # For MKL we'll always use conda
    - uses: conda-incubator/setup-miniconda@v2
      if: startswith(matrix.blas,'MKL')
      with:
        activate-environment: "test"
        python-version: "3.10"
        channels: conda-forge
        channel-priority: strict

    - name: MKL setup - mkl, hdf5, and libmatio via conda
      if: startswith(matrix.blas,'MKL')
      run: |
        conda install mkl mkl-include numpy hdf5 libmatio swig

    - name: Windows OpenBLAS setup 1 - set env and install NumPy via pip
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      run: |
        VCPKG_INSTALLED_DIR="${PWD}/build/vcpkg_installed"
        echo "$VCPKG_INSTALLED_DIR"
        VCPKG_INSTALLED_DIR=$(cygpath -m "$VCPKG_INSTALLED_DIR")
        echo "$VI"
        echo "VCPKG_INSTALLED_DIR=$VCPKG_INSTALLED_DIR" >> $GITHUB_ENV
        VCPKG_INSTALL_OPTIONS=--x-install-root=$VCPKG_INSTALLED_DIR
        echo "VCPKG_INSTALL_OPTIONS=$VCPKG_INSTALL_OPTIONS" >> $GITHUB_ENV
        echo "VCPKG_OPT=-DVCPKG_INSTALL_OPTIONS=$VCPKG_INSTALL_OPTIONS" >> $GITHUB_ENV

        CMAKE_TOOLCHAIN_FILE=${PWD}/vcpkg/scripts/buildsystems/vcpkg.cmake
        echo "$CMAKE_TOOLCHAIN_FILE"
        CMAKE_TOOLCHAIN_FILE=$(cygpath -m "$CMAKE_TOOLCHAIN_FILE")
        echo "$CMAKE_TOOLCHAIN_FILE"
        echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> $GITHUB_ENV

        pip install --upgrade -q pip
        pip install --upgrade --progress-bar off -q numpy

    - uses: actions/cache@v3
      name: Cache vcpkg
      with:
        path: |
          vcpkg
          build/vcpkg_installed
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-1

    - name: Windows OpenBLAS setup 2 - hdf5 and libmatio via vcpkg
      if: startswith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      id: runvcpkg
      #uses: lukka/run-vcpkg@v10
      #with:
      #  vcpkgDirectory: '${{ github.workspace }}/vcpkg'
      #  vcpkgGitCommitId: '14e7bb4ae24616ec54ff6b2f6ef4e8659434ea44'  # 2022-05-05 release
      #  runVcpkgInstall: true
      #  vcpkgJsonGlob: '**/vcpkg.json'
      #  appendedCacheKey: vcpkginstall
      run: |
        set -x
        if [ ! -d vcpkg ]; then
          git clone https://github.com/Microsoft/vcpkg.git --depth=1
          cd vcpkg
          git fetch origin 2022.05.10:use --depth=1
          git checkout use
          ./bootstrap-vcpkg.sh
          cd ..
        fi
        ./vcpkg/vcpkg install --triplet=x64-windows --recurse $VCPKG_INSTALL_OPTIONS

    - name: Windows OpenBLAS setup 3 - check env
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      run: |
        echo "VCPKG_INSTALLED_DIR: $VCPKG_INSTALLED_DIR"
        test -d $(cygpath -u "$VCPKG_INSTALLED_DIR")
        echo "CMAKE_TOOLCHAIN_FILE: $CMAKE_TOOLCHAIN_FILE"
        test -f $(cygpath -u "$CMAKE_TOOLCHAIN_FILE")

    - name: Windows OpenBLAS setup 4 - OpenBLAS
      if: startsWith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      run: |
        # OpenBLAS direct download (too slow to build using vcpkg)
        # and renaming to match what cmake wants to see
        curl -LO https://anaconda.org/multibuild-wheels-staging/openblas-libs/v0.3.18/download/openblas-v0.3.18-win_amd64-gcc_8_1_0.zip
        unzip openblas-v0.3.18-win_amd64-gcc_8_1_0.zip -d openblas
        OPENBLAS_LIB=${PWD}/openblas/64/lib
        OPENBLAS_INCLUDE=${PWD}/openblas/64/include
        echo "$OPENBLAS_LIB"
        test -d "$OPENBLAS_LIB"
        echo "$OPENBLAS_INCLUDE"
        test -d "$OPENBLAS_INCLUDE"
        cd $OPENBLAS_LIB
        ls -al
        mv ../bin/libopenblas_v0.3.18-gcc_8_1_0.dll openblas.dll
        mv libopenblas_v0.3.18-gcc_8_1_0.a openblas.a
        mv libopenblas_v0.3.18-gcc_8_1_0.def openblas.def
        mv libopenblas_v0.3.18-gcc_8_1_0.dll.a openblas.dll.a
        mv libopenblas_v0.3.18-gcc_8_1_0.exp openblas.exp
        mv libopenblas_v0.3.18-gcc_8_1_0.lib openblas.lib
        cd ../../../
        echo "LIB=$(cygpath -w $OPENBLAS_LIB);${LIB}" >> $GITHUB_ENV
        echo "CPATH=$(cygpath -w $OPENBLAS_INCLUDE);${CPATH}" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=-I$(cygpath -m $OPENBLAS_INCLUDE)" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR=MinGW Makefiles" >> $GITHUB_ENV
        echo "BUILD_OPT=-j 1" >> $GITHUB_ENV
        # Finally, print our settings
        cat $GITHUB_ENV

    - name: MacOS OpenBLAS setup - Python, NumPy, hdf5, libmatio, and doxygen via brew
      if: startsWith(matrix.os,'macos')
      run: |
        brew update > /dev/null
        brew install hdf5 libmatio boost vtk numpy swig homebrew/cask/doxygen graphviz
        brew install openblas
        echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV

    - name: Linux OpenBLAS setup - Python, NumPy, hdf5, libmatio, and doxygen via apt
      if: startsWith(matrix.os,'ubuntu') && startswith(matrix.blas,'OpenBLAS')
      run: |
        sudo apt update
        sudo apt -yq install libopenblas-dev liblapacke-dev python3-numpy doxygen graphviz libmatio-dev libvtk7-dev lcov

    - name: Configure CMake
      run: |
        set -x
        cmake -B build \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              ${{env.BLA_STATIC_OPT}} \
              ${{env.BLA_IMPL}} \
              ${{env.BLA_PARA}} \
              ${{env.PYTHON_OPT}} \
              ${{env.DOC_OPT}} \
              -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }} \
              -DCMAKE_CXX_FLAGS=${{ env.CMAKE_CXX_FLAGS }} \
              -DTEST_HEAD3=ON

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build build ${{env.BUILD_OPT}} --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest -C ${{env.BUILD_TYPE}} || ctest --rerun-failed --output-on-failure
