name: PR Checker
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash -el {0}

jobs:

  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    continue-on-error: true
    strategy:
      matrix:
        # Cover the most useful cases most completely
        # TODO: ubuntu-18.04 Python is broken (tests fail)
        # TODO: ubuntu+MKL Python is broken (symbol not found/linking/path issue)
        # TODO: MKL will not build on Windows
        # TODO: MKL status unknown on macOS
        # TODO: Static build broken for OpenBLAS (Could NOT find LAPACK (missing: LAPACK_LIBRARIES))
        os: [ubuntu-20.04, windows-latest, macos-latest]
        blas: [OpenBLAS]
        linking: [dynamic]
        python: [python]
        include:
          # no-python build
          - os: ubuntu-20.04
            blas: OpenBLAS
            linking: dynamic
            python: no-python
          # static build
          #- os: ubuntu-20.04
          #  blas: OpenBLAS
          #  linking: static
          #  python: python
          # ubuntu-18.04 build, but Python tests currently fail so use no-python
          - os: ubuntu-18.04
            blas: OpenBLAS
            linking: dynamic
            python: no-python

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Environment setup
      run: |
        if [ ${{matrix.linking}} == 'static' ]; then
          echo "STATIC_OPT='-DBLA_STATIC=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.python}} == 'python' ]; then
          echo "PYTHON_OPT='-DENABLE_PYTHON=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.blas}} == 'MKL' ]; then
          echo "BLA_IMPL=-DBLA_IMPLEMENTATION=MKL" >> $GITHUB_ENV
          echo "BLA_PARA=-DMKL_PARALLELISM=sequential" >> $GITHUB_ENV
        fi
        # Build docs on Ubuntu, not elsewhere (for speed)
        if [[ ${{matrix.os}} == 'ubuntu'* ]]; then
          BUILD_DOCS=ON
        else
          BUILD_DOCS=OFF
        fi
        echo "DOC_OPT=-DBUILD_DOCUMENTATION=$BUILD_DOCS" >> $GITHUB_ENV

    # We can use the default Python3 for other OSes
    - uses: actions/setup-python@v4
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      with:
        python-version: '3.10'

    # For MKL we'll always use conda
    - uses: conda-incubator/setup-miniconda@v2
      if: startswith(matrix.blas,'MKL')
      with:
        activate-environment: "test"
        python-version: "3.10"
        channels: conda-forge
        channel-priority: strict

    - name: MKL setup - mkl, hdf5, and libmatio via conda
      if: startswith(matrix.blas,'MKL')
      run: |
        conda install mkl mkl-include numpy hdf5 libmatio swig

    - name: Windows OpenBLAS setup 1 - hdf5, libmatio, and openblas via vcpkg
      if: startswith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      uses: lukka/run-vcpkg@v10
      id: runvcpkg
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '14e7bb4ae24616ec54ff6b2f6ef4e8659434ea44'  # 2022-05-05 release
        runVcpkgInstall: true
        vcpkgJsonGlob: '**/build_tools/vcpkg.json'
        appendedCacheKey: vcpkginstall

    - name: Windows OpenBLAS setup 2 - set env and install NumPy via pip
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      run: |
        #git clone https://github.com/Microsoft/vcpkg.git
        #git checkout 14e7bb4ae24616ec54ff6b2f6ef4e8659434ea44
        #./vcpkg/bootstrap-vcpkg.sh
        #./vcpkg/vcpkg install matio[mat73,zlib] hdf5[zlib] openblas
        echo "VCPKG_MANIFEST_DIR=${PWD}/build_tools/vcpkg.json"
        TF=${PWD}/vcpkg/scripts/buildsystems/vcpkg.cmake
        echo "$TF"
        test -f "$TF"
        TF=$(cygpath -m "$TF")
        echo "$TF"
        echo "CMAKE_TOOLCHAIN_FILE=${TF}" >> $GITHUB_ENV
        pip install --upgrade -q pip
        pip install --upgrade --progress-bar off -q numpy

    #- name: Windows OpenBLAS setup 2 - OpenBLAS
    #  if: startsWith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
    #  run: |
    #    # OpenBLAS direct download (too slow to build using vcpkg)
    #    # and renaming to match what cmake wants to see
    #    curl -LO https://github.com/xianyi/OpenBLAS/releases/download/v0.3.20/OpenBLAS-0.3.20-x64.zip
    #    unzip OpenBLAS-0.3.20-x64.zip -d openblas
    #    cd openblas/lib
    #    ls -al
    #    mv ../bin/libopenblas.dll .
    #    for fname in lib*; do mv $fname ${fname:3:100}; done
    #    ls -al
    #    cd ../..
    #    LF=${PWD}/openblas/lib
    #    echo "$LF"
    #    test -d "$LF"
    #    LF=$(cygpath -m "$LF")
    #    echo "$LF"
    #    CF=${PWD}/openblas/include
    #    echo "$CF"
    #    test -d "$CF"
    #    CF=$(cygpath -m "$CF")
    #    echo "$CF"
    #    echo "LIB=${LF};${LIB}" >> $GITHUB_ENV
    #    echo "CPATH=${CF};${CPATH}" >> $GITHUB_ENV
    #    echo "CMAKE_CXX_FLAGS=-I${CF}" >> $GITHUB_ENV
    #    # Finally, print our settings
    #    cat $GITHUB_ENV

    - name: MacOS OpenBLAS setup - Python, NumPy, hdf5, libmatio, and doxygen via brew
      if: startsWith(matrix.os,'macos')
      run: |
        brew update > /dev/null
        brew install hdf5 libmatio boost vtk numpy swig homebrew/cask/doxygen graphviz
        brew install openblas
        echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV

    - name: Linux OpenBLAS setup - Python, NumPy, hdf5, libmatio, and doxygen via apt
      if: startsWith(matrix.os,'ubuntu') && startswith(matrix.blas,'OpenBLAS')
      run: |
        sudo apt update
        sudo apt -yq install libopenblas-dev liblapacke-dev python3-numpy doxygen graphviz libmatio-dev libvtk7-dev lcov

    - name: Configure CMake
      run: |
        set -x
        cmake -B build \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              ${{env.STATIC_OPT}} \
              ${{env.BLA_IMPL}} \
              ${{env.BLA_PARA}} \
              ${{env.PYTHON_OPT}} \
              ${{env.DOC_OPT}} \
              -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }} \
              -DCMAKE_CXX_FLAGS=${{ env.CMAKE_CXX_FLAGS }} \
              -DTEST_HEAD3=ON

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest -C ${{env.BUILD_TYPE}} || ctest --rerun-failed --output-on-failure
