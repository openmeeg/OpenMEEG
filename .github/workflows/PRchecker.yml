name: PR Checker
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash -el {0}

jobs:

  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    continue-on-error: true
    strategy:
      matrix:
        # Cover the most useful cases most completely
        # TODO: ubuntu-18.04 is broken
        # TODO: MKL+Python is broken
        os: [ubuntu-20.04, windows-latest, macos-latest]
        blas: [OpenBLAS, MKL]
        linking: [dynamic]
        python: [python]
        include:
          # A no-python build
          - os: ubuntu-20.04
            blas: OpenBLAS
            linking: dynamic
            python: no-python
          # A static build
          - os: ubuntu-20.04
            blas: OpenBLAS
            linking: static
            python: python

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Environment setup
      run: |
        if [ ${{matrix.linking}} == 'static' ]; then
          echo "STATIC='-DBLA_STATIC=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.python}} == 'python' ]; then
          echo "PYTHON_OPT='-DENABLE_PYTHON=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.blas}} == 'MKL' ]; then
          echo "BLA_IMPL=-DBLA_IMPLEMENTATION=MKL" >> $GITHUB_ENV
          echo "BLA_PARA=-DMKL_PARALLELISM=sequential" >> $GITHUB_ENV
        fi

    - name: Windows setup
      if: startsWith(matrix.os,'windows')
      run: |
        echo "BLAS=Intel10_64lp_seq" >> $GITHUB_ENV
        #C:/Miniconda/condabin/conda.bat update conda
        #C:/Miniconda/condabin/conda.bat config --add channels conda-forge
        C:/Miniconda/condabin/conda.bat install --yes -c massich matio-cmake
        C:/Miniconda/condabin/conda.bat install --yes -c intel -c intel mkl-devel
        #C:/Miniconda/condabin/conda.bat install numpy mkl=2021.* libblas=*=*mkl
        #source "C:/Program Files (x86)/IntelSWTools/compilers_and_libraries_2019.5.281/windows/mkl/bin/mklvars.bat"
        #printenv >> $GITHUB_ENV

    - name: MacOS setup
      if: startsWith(matrix.os,'macos')
      run: |
        brew update > /dev/null
        brew install hdf5 libmatio boost vtk numpy swig
        if [ ${{matrix.blas}} == "OpenBLAS" ]; then
          brew install openblas
          echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
        else
          MKL_LIBS=mkl-devel
          if [ ${{matrix.linking}} == 'static' ]; then
            MKL_LIBS=mkl-static
          fi
          sudo chown -R 501:20 /usr/local/miniconda/pkgs/  # Workaround gha miniconda installation pb.
          conda init bash
          $CONDA/bin/conda create -n openmeeg -c intel mkl ${MKL_LIBS} mkl-include
          $CONDA/bin/conda activate openmeeg
        fi

    - name: Linux setup
      if: startsWith(matrix.os,'ubuntu')
      run: |
        if [ ${{matrix.blas}} == "OpenBLAS" ]; then
          sudo apt-get update
          sudo apt-get -yq install libopenblas-dev liblapacke-dev
        else
          # There is a mkl version in the official repository for 20.04 but not for 18.04, but it is not up-to-date.
          # Instead rely on intel packages.
          # Get and install the key:
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB |\
                gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" |\
                sudo tee /etc/apt/sources.list.d/oneAPI.list

          # In newer ubuntu >=20.04, mkl is part of the distribution. It can directly be installed with:
          # The syntaxic sugar is because the installation has some interactive configuration part.
          # sudo DEBIAN_FRONTEND=noninteractive apt-get -yq intel-mkl libmkl-full-dev
          # Use this when the ubuntu mkl will be more up-to-date and reliable (in particular in its cmake support).

          sudo apt-get update
          sudo apt-get -yq install intel-oneapi-mkl-devel

          # We need to set some global vars to allow cmake to detect MKL on ubuntu.

          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
        fi

        sudo apt-get update
        sudo apt-get -yq install python3-numpy doxygen graphviz libmatio-dev libvtk7-dev lcov

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration
      # generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B build \
              -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
              ${{env.STATIC_OPT}} \
              ${{env.BLA_IMPL}} \
              ${{env.BLA_PARA}} \
              ${{env.PYTHON_OPT}} \
              -DBUILD_DOCUMENTATION=ON \
              -DTEST_HEAD3=ON

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest -C ${{env.BUILD_TYPE}} || ctest --rerun-failed --output-on-failure
