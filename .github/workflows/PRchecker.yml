name: Test
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash -el {0}

jobs:

  build:
    continue-on-error: true
    strategy:
      matrix:
        # TODO: MKL currently untested on any platform
        # TODO: static (BLAS linking) builds currently untested on any platform
        # TODO: Get vcpkg to actually use the Windows 8.1 SDK
        # TODO: Could try boost-smart-ptr from vcpkg when using v140 tools
        # Someday we could use OpenBLAS for Windows once vcpkg sorts things out
        # (https://github.com/microsoft/vcpkg/issues/25176), but it's unclear
        # if this will really help anything. SciPy's should be well tested
        # already.
        os: [ubuntu-20.04, windows-2019, macos-latest]
        blas: [OpenBLAS]
        blas_linking: [dynamic]
        python: [python]
        include:
        # ubuntu-18.04 build, but Python tests currently fail so use no-python
        - os: ubuntu-18.04
          blas: OpenBLAS
          blas_linking: dynamic
          python: no-python

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Environment setup
      run: |
        if [ ${{matrix.blas_linking}} == 'static' ]; then
          echo "BLA_STATIC_OPT='-DBLA_STATIC=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.python}} == 'python' ]; then
          echo "PYTHON_OPT='-DENABLE_PYTHON=ON'" >> $GITHUB_ENV
        fi
        if [ ${{matrix.blas}} == 'MKL' ]; then
          echo "BLA_IMPL=-DBLA_IMPLEMENTATION=MKL" >> $GITHUB_ENV
          echo "BLA_PARA=-DMKL_PARALLELISM=sequential" >> $GITHUB_ENV
        fi
        # Build docs on Ubuntu, not elsewhere (for speed)
        if [[ ${{matrix.os}} == 'ubuntu'* ]]; then
          BUILD_DOCS=ON
        else
          BUILD_DOCS=OFF
        fi
        # Use -Werror on Windows, eventually should use everywhere
        if [[ ${{matrix.os}} == 'windows*' ]]; then
          ENABLE_WERROR=ON
        else
          ENABLE_WERROR=OFF
        fi
        echo "ENABLE_WERROR=$ENABLE_WERROR" >> $GITHUB_ENV
        echo "DOC_OPT=-DBUILD_DOCUMENTATION=$BUILD_DOCS" >> $GITHUB_ENV

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}

    # Windows only -- we can use the default Python3 for Linux + macOS
    - name: Windows OpenBLAS setup 1 - install Python
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # For MKL we'll always use conda
    - uses: conda-incubator/setup-miniconda@v2
      if: startswith(matrix.blas,'MKL')
      with:
        activate-environment: "test"
        python-version: "3.10"
        channels: conda-forge
        channel-priority: strict

    - name: MKL setup - mkl, hdf5, and libmatio via conda
      if: startswith(matrix.blas,'MKL')
      run: |
        conda install mkl mkl-include numpy hdf5 libmatio swig

    - name: Windows OpenBLAS setup 2 - set env and install NumPy via pip
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      run: |
        VCPKG_INSTALLED_DIR="${PWD}/build/vcpkg_installed"
        echo "$VCPKG_INSTALLED_DIR"
        VCPKG_INSTALLED_DIR=$(cygpath -m "$VCPKG_INSTALLED_DIR")
        echo "$VI"
        echo "VCPKG_INSTALLED_DIR=$VCPKG_INSTALLED_DIR" >> $GITHUB_ENV
        VCPKG_DEFAULT_TRIPLET=x64-mingw-dynamic
        echo "VCPKG_DEFAULT_TRIPLET=$VCPKG_DEFAULT_TRIPLET" >> $GITHUB_ENV
        echo "VCPKG_DEFAULT_HOST_TRIPLET=$VCPKG_DEFAULT_TRIPLET" >> $GITHUB_ENV
        VCPKG_INSTALL_OPTIONS="--x-install-root=$VCPKG_INSTALLED_DIR --triplet=$VCPKG_DEFAULT_TRIPLET"
        echo "VCPKG_INSTALL_OPTIONS=$VCPKG_INSTALL_OPTIONS" >> $GITHUB_ENV

        CMAKE_TOOLCHAIN_FILE=${PWD}/vcpkg/scripts/buildsystems/vcpkg.cmake
        echo "$CMAKE_TOOLCHAIN_FILE"
        CMAKE_TOOLCHAIN_FILE=$(cygpath -m "$CMAKE_TOOLCHAIN_FILE")
        echo "$CMAKE_TOOLCHAIN_FILE"
        echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> $GITHUB_ENV

        pip install --upgrade -q pip
        pip install --upgrade --progress-bar off -q numpy

    - name: Windows OpenBLAS setup 3 - cache vcpkg
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      uses: actions/cache@v3
      with:
        path: |
          vcpkg
          build/vcpkg_installed
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-mingw64-0

    - name: Windows OpenBLAS setup 4 - hdf5 and libmatio via vcpkg
      if: startswith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      id: runvcpkg
      run: |
        set -x
        if [ ! -d vcpkg ]; then
          git clone https://github.com/Microsoft/vcpkg.git --depth=1
          cd vcpkg
          git fetch origin 2022.05.10:use --depth=1
          git checkout use
          ./bootstrap-vcpkg.sh
          cd ..
        fi

    - name: Windows OpenBLAS setup 5 - check env
      if: startswith(matrix.blas,'OpenBLAS') && startswith(matrix.os,'windows')
      run: |
        echo "VCPKG_INSTALLED_DIR: $VCPKG_INSTALLED_DIR"
        test -d $(cygpath -u "$VCPKG_INSTALLED_DIR")
        echo "CMAKE_TOOLCHAIN_FILE: $CMAKE_TOOLCHAIN_FILE"
        test -f $(cygpath -u "$CMAKE_TOOLCHAIN_FILE")

    - name: Windows OpenBLAS setup 6 - OpenBLAS
      if: startsWith(matrix.blas,'OpenBLAS') && startsWith(matrix.os,'windows')
      run: |
        # OpenBLAS direct download (too slow to build using vcpkg)
        # and renaming to match what cmake wants to see
        curl -LO https://anaconda.org/multibuild-wheels-staging/openblas-libs/v0.3.18/download/openblas-v0.3.18-win_amd64-gcc_8_1_0.zip
        unzip openblas-v0.3.18-win_amd64-gcc_8_1_0.zip -d openblas
        OPENBLAS_LIB=${PWD}/openblas/64/lib
        OPENBLAS_INCLUDE=${PWD}/openblas/64/include
        echo "$OPENBLAS_LIB"
        test -d "$OPENBLAS_LIB"
        echo "$OPENBLAS_INCLUDE"
        test -d "$OPENBLAS_INCLUDE"
        cd $OPENBLAS_LIB
        ls -al
        cp ../bin/libopenblas_v0.3.18-gcc_8_1_0.dll .
        cp libopenblas_v0.3.18-gcc_8_1_0.dll openblas.dll
        mv libopenblas_v0.3.18-gcc_8_1_0.a openblas.a
        mv libopenblas_v0.3.18-gcc_8_1_0.def openblas.def
        mv libopenblas_v0.3.18-gcc_8_1_0.dll.a openblas.dll.a
        mv libopenblas_v0.3.18-gcc_8_1_0.exp openblas.exp
        mv libopenblas_v0.3.18-gcc_8_1_0.lib openblas.lib
        cd ../../../
        echo "OPENBLAS_LIB=$OPENBLAS_LIB" >> $GITHUB_ENV
        echo "LIB=$(cygpath -w $OPENBLAS_LIB);${LIB}" >> $GITHUB_ENV
        #echo "CPATH=$(cygpath -w $OPENBLAS_INCLUDE);${CPATH}" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=-I$(cygpath -m $OPENBLAS_INCLUDE)" >> $GITHUB_ENV

        echo "CMAKE_GENERATOR=MinGW Makefiles" >> $GITHUB_ENV

        #echo "CMAKE_GENERATOR=Visual Studio 16 2019" >> $GITHUB_ENV
        #echo "CMAKE_GENERATOR_PLATFORM=x64" >> $GITHUB_ENV
        #echo "SDK_OPT=-DCMAKE_SYSTEM_VERSION=8.1" >> $GITHUB_ENV
        #echo "TOOLSET_OPT=-DCMAKE_GENERATOR_TOOLSET=v141" >> $GITHUB_ENV

        # On Windows, we tell cmake to copy all runtime deps to the build dir,
        # and for tests (and Python) to find them, we need to add it to PATH
        echo "PATH=$(cygpath -w ${PWD}/build);$PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$(cygpath -w ${PWD}/build);$PYTHONPATH" >> $GITHUB_ENV
        # This makes debugging easier on failure
        # echo "BUILD_OPT=-j 1" >> $GITHUB_ENV
        # Finally, print our settings
        cat $GITHUB_ENV

    - name: MacOS OpenBLAS setup - Python, NumPy, hdf5, and libmatio via brew
      if: startsWith(matrix.os,'macos')
      run: |
        brew update > /dev/null
        brew install hdf5 libmatio boost vtk numpy swig
        brew install openblas
        echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
        echo "CMAKE_CXX_FLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV

    - name: Linux OpenBLAS setup - Python, NumPy, hdf5, libmatio, and doxygen via apt
      if: startsWith(matrix.os,'ubuntu') && startswith(matrix.blas,'OpenBLAS')
      run: |
        sudo apt update
        sudo apt -yq install libopenblas-dev liblapacke-dev python3-numpy doxygen graphviz libmatio-dev libvtk7-dev lcov

    - name: Configure
      run: |
        set -x
        cmake -B build \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              ${{env.BLA_STATIC_OPT}} \
              ${{env.BLA_IMPL}} \
              ${{env.BLA_PARA}} \
              ${{env.PYTHON_OPT}} \
              ${{env.DOC_OPT}} \
              ${{env.SDK_OPT}} \
              ${{env.TOOLSET_OPT}} \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }} \
              -DCMAKE_CXX_FLAGS=${{ env.CMAKE_CXX_FLAGS }} \
              -DENABLE_WERROR=${{ env.ENABLE_WERROR }} \
              -DTEST_HEAD3=ON

    - name: Build
      run: |
        cmake --build build ${{env.BUILD_OPT}} --config ${{env.BUILD_TYPE}}
        # Ideally this would be in cmake, but we can live with manual moving for inplace testing
        if [[ ${{matrix.os}} == 'windows'* ]]; then
          cd build
          echo "Before:"
          ls -al *.dll
          cp $OPENBLAS_LIB/libopenblas_v0.3.18-gcc_8_1_0.dll .
          cp $OPENBLAS_LIB/libopenblas_v0.3.18-gcc_8_1_0.dll openblas.dll
          cp OpenMEEGMaths/libmatio.dll .
          echo "After:"
          ls *.dll
          for name in libOpenMEEG libOpenMEEGMaths hdf5 szip libmatio libopenblas_v0.3.18-gcc_8_1_0; do
            if [[ -f "${name}.dll" ]]; then
              echo "${name}:"
              ldd "${name}.dll"
              python -c "from ctypes import WinDLL; print(WinDLL('${name}.dll'))"
            else
              echo "Missing ${name}"
            fi
          done
          set -x
          cp -a *.dll wrapping/src
          cd ..
        fi
        ls -al build

    - name: Upload wrapped Python lib
      if: startswith(matrix.python, 'python')
      uses: actions/upload-artifact@v3
      with:
        name: wrapping-${{ matrix.os }}
        path: build/wrapping/src

#    - name: Test Python quickly first
#      if: startswith(matrix.python, 'python')
#      run:
#        cd wrapping/src
#        ls -al
#        if [[ ${{matrix.os}} == 'windows'* ]]; then
#          curl -LO https://github.com/lucasg/Dependencies/releases/download/v1.11.1/Dependencies_x64_Release.zip
#          unzip -q Dependencies_x64_Release.zip -d deps
#          ./deps/Dependencies -modules _openmeeg.pyd
#          python -c "from ctypes import WinDLL; print(WinDLL('_openmeeg.pyd'))"
#        else if [[ ${{matrix.os}} == 'ubuntu'* ]]; then
#          ldd _openmeeg.pyd
#        fi
#        python -c "import openmeeg; print(openmeeg.sqr(4))"
#
#    - name: Test
#      working-directory: ${{github.workspace}}/build
#      run: |
#        ctest -C $BUILD_TYPE || ctest -C $BUILD_TYPE --rerun-failed --output-on-failure
